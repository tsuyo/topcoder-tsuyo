import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ConnectingAirportsTest {

    protected ConnectingAirports solution;

    @Before
    public void setUp() {
        solution = new ConnectingAirports();
    }

    @Test(timeout = 2000)
    public void testCase0() {
        int[] capacityA = new int[]{1, 2, 3};
        int[] capacityU = new int[]{3, 1, 2};

        String[] expected = new String[]{"100", "101", "111"};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase1() {
        int[] capacityA = new int[]{3, 2, 1, 1};
        int[] capacityU = new int[]{1, 3, 1, 2};

        String[] expected = new String[]{"0111", "0101", "0100", "1000"};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase2() {
        int[] capacityA = new int[]{1, 2, 3, 4};
        int[] capacityU = new int[]{5, 6, 7, 8};

        String[] expected = new String[]{};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase3() {
        int[] capacityA = new int[]{47, 47};
        int[] capacityU = new int[]{47, 40, 7};

        String[] expected = new String[]{};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase4() {
        int[] capacityA = new int[]{5, 5};
        int[] capacityU = new int[]{1, 1, 2, 1, 1, 1, 1, 1, 1};

        String[] expected = new String[]{"001001111", "111110000"};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase5() {
        int[] capacityA = new int[]{0, 0, 0, 0};
        int[] capacityU = new int[]{0, 0, 0, 0, 0, 0};

        String[] expected = new String[]{"000000", "000000", "000000", "000000"};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }
    
    @Test(timeout = 2000)
    public void testCase6() {
        int[] capacityA = new int[]{3, 2, 1, 1};
        int[] capacityU = new int[]{3, 2, 1, 1};

        String[] expected = new String[]{"0111", "1100", "1000", "1000"};
        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }
    
    @Test(timeout = 2000)
    public void testCase7() {
        int[] capacityA = new int[]{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30}; 
        int[] capacityU = new int[]{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30};

        String[] expected = new String[]{};

        String[] actual = solution.getSchedule(capacityA, capacityU);

        Assert.assertArrayEquals(expected, actual);
    }
    
}
