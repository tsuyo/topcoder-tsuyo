import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class BoardFoldingDiv2Test {

  protected BoardFoldingDiv2 solution;

  @Before
  public void setUp() {
    solution = new BoardFoldingDiv2();
  }

  @Test(timeout = 2000)
  public void testCase0() {
    String[] paper = new String[] { "10", "11" };

    int expected = 1;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

  @Test(timeout = 2000)
  public void testCase1() {
    String[] paper = new String[] { "1111111", "1111111" };

    int expected = 84;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

  @Test(timeout = 2000)
  public void testCase2() {
    String[] paper = new String[] { "0110", "1001", "1001", "0110" };

    int expected = 9;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

  @Test(timeout = 2000)
  public void testCase3() {
    String[] paper = new String[] { "0", "0", "0", "1", "0", "0" };

    int expected = 6;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

  @Test(timeout = 2000)
  public void testCase4() {
    String[] paper = new String[] { "000", "010", "000" };

    int expected = 1;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

  @Test(timeout = 2000)
  public void testCase5() {
    String[] paper = new String[] {
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000" };

    int expected = 1625625;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

  @Test(timeout = 2000)
  public void testCase6() {
    String[] paper = new String[] { "0000001111111001", "1010011101011100",
        "0000001111111001", "1010011101011100", "1010011101011100",
        "1010011101011100", "0000001111111001", "1010011101011100",
        "0000001111111001", "0000001111111001", "1010011101011100",
        "1010011101011100", "1010011101011100", "0000001111111001",
        "1010011101011100", "1010011101011100", "1010011101011100",
        "1010011101011100", "1010011101011100", "0000001111111001",
        "1010011101011100", "0000001111111001", "1010011101011100",
        "1010011101011100", "1010011101011100", "1010011101011100",
        "0000001111111001", "1010011101011100", "1010011101011100",
        "1010011101011100", "1010011101011100", "0000001111111001",
        "1010011101011100", "1010011101011100" };

    int expected = 6;
    int actual = solution.howMany(paper);

    Assert.assertEquals(expected, actual);
  }

}
