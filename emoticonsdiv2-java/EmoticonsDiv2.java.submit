import java.util.*;

class Node implements Comparable<Node> {
	int cur, clip, cost;

	Node(int cur, int clip, int cost) {
		this.cur = cur;
		this.clip = clip;
		this.cost = cost;
	}

	@Override
	public int compareTo(Node o) {
		return cost - o.cost;
	}
}

public class EmoticonsDiv2 {

	public int printSmiles(int smiles) {
		boolean[][] visited = new boolean[smiles + 1][smiles + 1];
		PriorityQueue<Node> pq = new PriorityQueue<Node>();
		pq.offer(new Node(0, 1, 0));
		while (!pq.isEmpty()) {
			Node node = pq.poll();
			if (visited[node.cur][node.clip])
				continue;
			if (node.cur == smiles)
				return node.cost;
			visited[node.cur][node.clip] = true;
			// paste
			if (node.cur + node.clip <= smiles)
				pq.offer(new Node(node.cur + node.clip, node.clip,
						node.cost + 1));
			// copy
			pq.offer(new Node(node.cur, node.cur, node.cost + 1));
		}
		return -1;
	}

	void debug(Object... obj) {
		System.err.println(Arrays.deepToString(obj));
	}

}
